// Create an immediately invoked functional expression to wrap our code
(function(w, d) {

	var aOptions = null;

	/**
	 * This will include the script with the gtm javascript
	 * to the document. The gtm id and the name of the global
	 * variable are defined here.
	 * @return {void}
	 */
	function initGTMTag() {
		// GTM Old Container that has all the facebook and other tags
		(function(w, d, s, l, i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
		})(w, d, 'script', 'webLayer', 'GTM-T82T5C');

		// GTM container created by Analytics Pros
		(function(w, d, s, l, i){w[l]=w[l]||[];w[l].push({'gtm.start':
			new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
			j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
			'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
		})(w, d, 'script', 'webLayer', 'GTM-M9N5CND');
	}


	// gets the value of the cookie 'key'
	// http://stackoverflow.com/a/25490531/374658
	function getCookie(key) {
		var b = d.cookie.match('(^|;)\\s*' + key + '\\s*=\\s*([^;]+)');
		return b ? b.pop() : null;
	}

	function formatAsString(value, upper) {
		if (value == null) {
			return '';
		}
		if (upper) (value).toString().toUpperCase();
		return (value).toString().toLowerCase();
	}

	/**
	 * This will initialize the weblayer with the weblayer-initialized
	 * event. So we always track this elements in the page
	 * @return {void}
	 */
	function prepareWebLayer() {

		w.webLayer = w.webLayer || [];
		w.webLayer.push({
			'event': 'webLayer-initialized',
			'pageDetails': {
				'pageAccess': aOptions.pageAccess, //logged-in, logged-out
				'language': aOptions.userLanguage,
				// Extra data
				'pageRequiresSignIn': aOptions.pageRequiresSignIn
			},
			'sessionDetails': {
				'loggedIn': getCookie('loggedin') ? 'yes' : 'no',
				'internal': aOptions.weeblyInternal,
				'weeblyTrackingSessionId': getCookie('weebly_tracking_sessionid')
			},
			'userDetails': {
				'userID': aOptions.userID,
				'firstSign-upDate': aOptions.userSignUpDate,
				'hasSubscribed': aOptions.userHasSubscribed,
				'siteSubscriptionName': aOptions.userHighestLevel,
				'hasPublishedSite': aOptions.hasPublishedSites,
				'numberSitesPublished': aOptions.publishedSites,
				'lastPublishDate': aOptions.lastPublishedDate,
				'hasExternalDomain': aOptions.hasCustomDomains,
				'hasCommerceSites': aOptions.hasCommerceSites,
				'numberCommerceSites': aOptions.commerceSites,
				'hasAutoPayEnabled': aOptions.hasAutoPayEnabled,
				'promoteStatus': aOptions.hasPromoteSubscription,
				'userHighestLevelPromote': aOptions.userHighestLevelPromote,
				// Extra data
				'duid': getCookie('srv_domainuserid'),
				'actingUserType': aOptions.actingUserType,
				'isWhiteLabeledUser': aOptions.isWhiteLabeledUser
			}
		});
	}

   	/**
	 * Generates or prolongs cookie with tracking session ID value
	 * Initially created for DCM Floodlight session tag
	 *
	 * @returns {void}
	 */
	function setTrackingSessionIdCookie() {
		var dcmSessionVal = getCookie('weebly_tracking_sessionid');
		var cookieLifeTime = 30; 	// in minutes

		var dateExpires = new Date();
		dateExpires.setTime(dateExpires.getTime() + cookieLifeTime * 60 * 1000); // dcm cookie life time in milliseconds

		if (dcmSessionVal === null) {
			// No dcm session cookie found - either it's user first visit or cookie got outdated and was deleted
			// adding new cookie to track the session
			var duid = getCookie('srv_domainuserid');
			if (duid === null) {
				// Failed to get duid value from srv_domainuserid cookie

				// Trying to get uid variable
				var uid;
				if (aOptions.hasOwnProperty('userID')) {
					uid = aOptions.userID;
				}

				if (uid == null || uid === '') {
					// Both duid and uid not available - generating random string
					duid = Array(4).join((Math.random().toString(36) + '0000000000000').slice(2, 13)).slice(0, 40);
				} else {
					duid = uid;
				}
			}

			var timestamp = Date.now() / 1000;												// unix timestamp in seconds
			dcmSessionVal = duid + '_' + Math.floor(timestamp / (cookieLifeTime * 60));  	// dcm session start interval number as an additional session id block
		}

		// Setting cookie OR updating its lifetime to prolong the session
		d.cookie = 'weebly_tracking_sessionid=' + dcmSessionVal + ';path=/;expires=' + dateExpires.toGMTString() + ';';
	}


	// Constructor
	this.Aragorn = function(options) {

		// Save options in a global variable
		aOptions = options;

		initTriggerMethod();

		if (!options.debug) {
			setTrackingSessionIdCookie();
			prepareWebLayer();
			initGTMTag();

			// Init listener of postMessages
			w.addEventListener('message', receiveEventMessage, false);
		}
	};


	/**
	 * Listener for when the iframes call the tracker using
	 * a post message. This way we can track events from
	 * a different source page.
	 * @param  {event} event  All event info (data contains the parameters)
	 * @return {void}
	 */
	function receiveEventMessage(post) {
		// Check if we have the event data
		if (!post.data.aTracker || !post.data.aTracker.triggerName) {
			return;
		}
		Aragorn.triggerGTMEvent(post.data.aTracker.triggerName, post.data.aTracker.params);
	}

	/**
	 * We have this function when is not a debug trigger.
	 * @see  triggerGTMEvent on the prototype.
	 * @param  {string} eventName   The name of the event
	 * @param  {json} otherParams   Extra parameters
	 * @return {void}
	 */
	var realTriggerGTMEvent = function(eventName, otherParams) {
		if (!otherParams) {
			otherParams = {};
		}
		var argsToPush = {
			'event': eventName
		};
		for (var prop in otherParams) {
			if (otherParams.hasOwnProperty(prop)) {
				argsToPush[prop] = otherParams[prop];
			}
		}
		webLayer.push(argsToPush);
	};

	/**
	 * If we are in debug mode we just send a console warning
	 * because we are not going to be triggering anything
	 * @param  {string} eventName A debug event name
	 * @return {void}             Writes to the js console
	 */
	var debugTriggerGTMEvent = function(eventName, otherParams) {
		if (!otherParams) {
			otherParams = {};
		}
		console.warn('Error trying to fire <' + eventName + '> in debug mode. ' +
			'Please make sure WEEBLY_DEBUG is false in config.me.php.');
		console.log(otherParams);
		if (typeof otherParams["eventCallback"] === "function") {
			otherParams["eventCallback"]();
		}
	}


	/**
	 * triggerGTMEvent will push the given event and the option otherParams
	 * to GTM. This is defined on the global window object because multiple files
	 * that work with GTM will need this functionality.
	 * @param  {string}	eventName		The name of the GTM event
	 * @param  {array}	otherParams		Extra parameters that we will track in the event
	 * @return {void}
	 */
	function initTriggerMethod() {
		if (aOptions.debug) {
			Aragorn.prototype.triggerGTMEvent = debugTriggerGTMEvent;
		} else {
			Aragorn.prototype.triggerGTMEvent = realTriggerGTMEvent;
		}
	}

	/**
	 * Track login event
	 * @param  {string} event  		The event name
	 * @param  {string} accessType 	standard|social|facebook|etc
	 * @param  {string} success    	success|fail
	 * @param  {json} 	theme 		The theme information
	 * @return {void}
	 */
	Aragorn.prototype.trackAccountAccessEvent = function(event, accessType, success, theme, callback) {
		if (event != 'account-sign-up' && event != 'account-login') {
			return;
		}

		var webLayerEvent = {
			'accountAccessType': accessType || 'standard',
			'successIndicator': success || 'fail'
		};

		// add theme data if we have it
		if (theme) {
			webLayerEvent['themeName'] = theme.name;
			webLayerEvent['themeID'] = theme.id;
			webLayerEvent['themeVertical'] = theme.vertical;
		}

		// run the callback method that was passed as a parameter
		// only if the method is something valid
		if (callback) {
			webLayerEvent['eventCallback'] = callback;
		}

		Aragorn.triggerGTMEvent(event, webLayerEvent);
	};

	function cleanProductsWithArray(products, allowedProps) {
		var cleanProducts = [];
		for (var i in products) {
			var product = products[i];
			var cleanProduct = {};
			for (var a in allowedProps) {
				prop = allowedProps[a];
				if (product[prop] != null) {
					cleanProduct[prop] = product[prop];
				}
			}
			cleanProducts.push(cleanProduct);
		}
		return cleanProducts;
	}


	/**
	 * Creates a new product in a consistent way for the events
	 * @param  {string}   id           The id of the product
	 * @param  {string}   name         The name of the product
	 * @param  {string}   category     The product category
	 * @param  {string}   brand        weebly | branch
	 * @param  {float}    price         The float value for the price
	 * @param  {integer}  qty         How many items are being purchased
	 * @param  {string}   duration     for how long, e.g. "annual"
	 * @param  {string}   displayPrice The price as is being displayed
	 * @param  {string}   rationale    Why are they here
	 * @param  {string}   list         The list this product on
	 * @param  {integer}  position    The list position
	 * @return {json}                The product json object
	 */
	Aragorn.prototype.createProduct = function(
		id,
		name,
		category,
		brand,
		price,
		qty,
		duration,
		displayPrice,
		source,
		rationale,
		list,
		position
	) {
		var product = {
			'id': formatAsString(id),                             // 'starterAnnualFreeDomain',
			'name': formatAsString(name),                         // 'starter site plan',
			'category': formatAsString(category),                 // 'websites',
			'brand': formatAsString(brand),                       // 'weebly',
			'price': formatAsString(price),                       // '96.00'
			'quantity': formatAsString(qty),                      // quantity: '1',
			'dimension1': formatAsString(duration),               // 'annual',
			'dimension2': formatAsString(displayPrice),           // '$8.00/month'
			'metric1': formatAsString(price * qty),               // float value
			'dimension71': formatAsString(source),                // origin of the purchase (home, editor, upgrade, etc)
			'dimension72': formatAsString(rationale),             // why they got here
			'list': formatAsString(list),                         // 'site plans'
			'position': formatAsString(position)                  // 'position': '0'
		};
		return product;
	};

	/**
	 * Tracks when the user checks the product detail view
	 * @param  {string} currencyCode  The currency code for the product
	 * @param  {array}  products      Product json objects
	 * @return {void}
	 */
	Aragorn.prototype.trackProductImpression = function(currencyCode, products) {

		// Don't track anything if we dont have any product
		if (!products.length || products.length < 1) {
			return;
		}

		var allowedProps = [
			'list',
			'position',
			'id',
			'name',
			'category',
			'brand',
			'price',
			'dimension1',
			'dimension2',
			'dimension71',
			'dimension72'
		];
		var cleanProducts = cleanProductsWithArray(products, allowedProps);

		var webLayerEvent = {
			'ecommerce': {
				'currencyCode': formatAsString(currencyCode, true),
				'impressions': cleanProducts
			}
		};

		Aragorn.triggerGTMEvent('product-impression', webLayerEvent);
	};

	/**
	 * Tracks when the user checks the product detail view
	 * @param  {string} currencyCode  The currency code for the product
	 * @param  {string} list          The list this product is from
	 * @param  {array}  products      Product json objects
	 * @return {void}
	 */
	Aragorn.prototype.trackProductClick = function(currencyCode, list, products) {

		// Don't track anything if we dont have any product
		if (!products.length || products.length < 1) {
			return;
		}

		var allowedProps = [
			'position',
			'id',
			'name',
			'category',
			'brand',
			'price',
			'dimension1',
			'dimension2',
			'dimension71',
			'dimension72'
		];
		var cleanProducts = cleanProductsWithArray(products, allowedProps);

		var webLayerEvent = {
			'ecommerce': {
				'currencyCode': formatAsString(currencyCode, true),
				'click': {
					'actionField': {
						'list': formatAsString(list)     // site plans
					},
					'products': products
				}
			}
		};

		Aragorn.triggerGTMEvent('product-click', webLayerEvent);
	};

	/**
	 * Tracks when the user checks the product detail view
	 * @param  {string} currencyCode  The currency code for the product
	 * @param  {array}  products      Product json objects
	 * @return {void}
	 */
	Aragorn.prototype.trackProductDetailView = function(currencyCode, products) {

		// Don't track anything if we dont have any product
		if (!products.length || products.length < 1) {
			return;
		}

		var allowedProps = [
			'id',
			'name',
			'category',
			'brand',
			'price',
			'dimension1',
			'dimension2',
			'dimension71',
			'dimension72'
		];
		var cleanProducts = cleanProductsWithArray(products, allowedProps);

		var webLayerEvent = {
			'ecommerce': {
				'currencyCode': formatAsString(currencyCode, true),
				'detail': {
					'actionField': {},
					'products': products
				}
			}
		};

		Aragorn.triggerGTMEvent('product-detail-view', webLayerEvent);
	};

	/**
	 * Tracks when the user checks the product detail view
	 * @param  {string} currencyCode  The currency code for the product
	 * @param  {array}  products      Product json objects
	 * @return {void}
	 */
	Aragorn.prototype.trackAddToCart = function(currencyCode, products) {

		// Don't track anything if we dont have any product
		if (!products.length || products.length < 1) {
			return;
		}

		var allowedProps = [
			'id',
			'name',
			'category',
			'brand',
			'price',
			'quantity',
			'dimension1',
			'dimension2',
			'dimension71',
			'dimension72',
			'metric1'
		];
		var cleanProducts = cleanProductsWithArray(products, allowedProps);

		var webLayerEvent = {
			'ecommerce': {
				'currencyCode': formatAsString(currencyCode, true),
				'add': {
					'products': products
				}
			}
		};

		Aragorn.triggerGTMEvent('add-to-cart', webLayerEvent);
	};

	/**
	 * Tracks any checkout step event
	 * @param  {string} currencyCode  The currency code
	 * @param  {string} id            The transaction ID
	 * @param  {int}    amount        The total amount paid
	 * @param  {array}  products      Product json objects
	 * @return {void}
	 */
	Aragorn.prototype.trackTransactionEvent = function(currencyCode, id, amount, products) {

		// Don't track anything if we dont have any product
		if (!products.length || products.length < 1) {
			return;
		}

		var allowedProps = [
			'id',
			'name',
			'category',
			'brand',
			'price',
			'quantity',
			'coupon',
			'dimension1',
			'dimension2',
			'dimension3',
			'dimension71',
			'dimension72',
			'metric2'
		];
		var cleanProducts = cleanProductsWithArray(products, allowedProps);

		var webLayerEvent = {
			'ecommerce':{
				'currencyCode': formatAsString(currencyCode, true),
				'purchase': {
					'actionField': {
						'id': formatAsString(id),
						'revenue': formatAsString(amount)
					},
					'products': products
				}
			}
		};

		Aragorn.triggerGTMEvent('transaction', webLayerEvent);
	};

}(window, document));

window.Aragorn = new Aragorn({"debug":false,"pageRequiresSignIn":"no","pageAccess":"logged-out","isWhiteLabeledUser":"no","userID":"116080713","publishedSites":1,"hasPublishedSites":"yes","commerceSites":0,"lastPublishedDate":"12\/14\/2017","hasCustomDomains":"no","hasAutoPayEnabled":"no","hasPromoteSubscription":"no","userHighestLevelPromote":"No Promote Plan","userSignUpDate":"12\/13\/2017","userHighestLevel":"\u514d\u8cbb","userLanguage":"zh_TW","weeblyInternal":"yes","actingUserType":"user","userHasSubscribed":"no"});

// to support brendan's way of triggering the gtm events
window.triggerGTMEvent = Aragorn.triggerGTMEvent;
